// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;

import '../entities/parking_entity.dart';
import '../entities/parking_space_entity.dart';
import '../entities/person_entity.dart';
import '../entities/vehicle_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8448756685682649899),
      name: 'ParkingEntity',
      lastPropertyId: const obx_int.IdUid(5, 3582479374788032921),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1984680148380655091),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5260266785386349893),
            name: 'vehicleId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 7910061890182033992),
            relationTarget: 'VehicleEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7098436844037054178),
            name: 'parkingSpaceId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 7178469029638787433),
            relationTarget: 'ParkingSpaceEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3156992928871210255),
            name: 'startTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3582479374788032921),
            name: 'endTime',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 4407802685306652129),
      name: 'ParkingSpaceEntity',
      lastPropertyId: const obx_int.IdUid(3, 7450109992284608905),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7070863136838255406),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 61494257422816125),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7450109992284608905),
            name: 'pricePerHour',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1613293111816462252),
      name: 'PersonEntity',
      lastPropertyId: const obx_int.IdUid(3, 8404318957467511061),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 19233394389269597),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8371795390049317381),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8404318957467511061),
            name: 'socialSecurityNumber',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 3263033936753839536),
      name: 'VehicleEntity',
      lastPropertyId: const obx_int.IdUid(4, 4129014785711129029),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4329874328920255263),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7989196139821774655),
            name: 'registrationNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8899406532577159307),
            name: 'ownerId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 6173139102471649757),
            relationTarget: 'PersonEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4129014785711129029),
            name: 'vehicleTypeIndex',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
obx.Store openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) {
  return obx.Store(getObjectBoxModel(),
      directory: directory,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 3263033936753839536),
      lastIndexId: const obx_int.IdUid(3, 6173139102471649757),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ParkingEntity: obx_int.EntityDefinition<ParkingEntity>(
        model: _entities[0],
        toOneRelations: (ParkingEntity object) =>
            [object.vehicle, object.parkingSpace],
        toManyRelations: (ParkingEntity object) => {},
        getId: (ParkingEntity object) => object.id,
        setId: (ParkingEntity object, int id) {
          object.id = id;
        },
        objectToFB: (ParkingEntity object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.vehicle.targetId);
          fbb.addInt64(2, object.parkingSpace.targetId);
          fbb.addInt64(3, object.startTime.millisecondsSinceEpoch);
          fbb.addInt64(4, object.endTime?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final endTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final startTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final endTimeParam = endTimeValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(endTimeValue);
          final object = ParkingEntity(
              id: idParam, startTime: startTimeParam, endTime: endTimeParam);
          object.vehicle.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.vehicle.attach(store);
          object.parkingSpace.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.parkingSpace.attach(store);
          return object;
        }),
    ParkingSpaceEntity: obx_int.EntityDefinition<ParkingSpaceEntity>(
        model: _entities[1],
        toOneRelations: (ParkingSpaceEntity object) => [],
        toManyRelations: (ParkingSpaceEntity object) => {},
        getId: (ParkingSpaceEntity object) => object.id,
        setId: (ParkingSpaceEntity object, int id) {
          object.id = id;
        },
        objectToFB: (ParkingSpaceEntity object, fb.Builder fbb) {
          final addressOffset = fbb.writeString(object.address);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, addressOffset);
          fbb.addFloat64(2, object.pricePerHour);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final pricePerHourParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = ParkingSpaceEntity(
              id: idParam,
              address: addressParam,
              pricePerHour: pricePerHourParam);

          return object;
        }),
    PersonEntity: obx_int.EntityDefinition<PersonEntity>(
        model: _entities[2],
        toOneRelations: (PersonEntity object) => [],
        toManyRelations: (PersonEntity object) => {},
        getId: (PersonEntity object) => object.id,
        setId: (PersonEntity object, int id) {
          object.id = id;
        },
        objectToFB: (PersonEntity object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final socialSecurityNumberOffset =
              fbb.writeString(object.socialSecurityNumber);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, socialSecurityNumberOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final socialSecurityNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final object = PersonEntity(
              id: idParam,
              name: nameParam,
              socialSecurityNumber: socialSecurityNumberParam);

          return object;
        }),
    VehicleEntity: obx_int.EntityDefinition<VehicleEntity>(
        model: _entities[3],
        toOneRelations: (VehicleEntity object) => [object.owner],
        toManyRelations: (VehicleEntity object) => {},
        getId: (VehicleEntity object) => object.id,
        setId: (VehicleEntity object, int id) {
          object.id = id;
        },
        objectToFB: (VehicleEntity object, fb.Builder fbb) {
          final registrationNumberOffset =
              fbb.writeString(object.registrationNumber);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, registrationNumberOffset);
          fbb.addInt64(2, object.owner.targetId);
          fbb.addInt64(3, object.vehicleTypeIndex);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final registrationNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final vehicleTypeIndexParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = VehicleEntity(
              id: idParam,
              registrationNumber: registrationNumberParam,
              vehicleTypeIndex: vehicleTypeIndexParam);
          object.owner.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.owner.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ParkingEntity] entity fields to define ObjectBox queries.
class ParkingEntity_ {
  /// See [ParkingEntity.id].
  static final id =
      obx.QueryIntegerProperty<ParkingEntity>(_entities[0].properties[0]);

  /// See [ParkingEntity.vehicle].
  static final vehicle = obx.QueryRelationToOne<ParkingEntity, VehicleEntity>(
      _entities[0].properties[1]);

  /// See [ParkingEntity.parkingSpace].
  static final parkingSpace =
      obx.QueryRelationToOne<ParkingEntity, ParkingSpaceEntity>(
          _entities[0].properties[2]);

  /// See [ParkingEntity.startTime].
  static final startTime =
      obx.QueryDateProperty<ParkingEntity>(_entities[0].properties[3]);

  /// See [ParkingEntity.endTime].
  static final endTime =
      obx.QueryDateProperty<ParkingEntity>(_entities[0].properties[4]);
}

/// [ParkingSpaceEntity] entity fields to define ObjectBox queries.
class ParkingSpaceEntity_ {
  /// See [ParkingSpaceEntity.id].
  static final id =
      obx.QueryIntegerProperty<ParkingSpaceEntity>(_entities[1].properties[0]);

  /// See [ParkingSpaceEntity.address].
  static final address =
      obx.QueryStringProperty<ParkingSpaceEntity>(_entities[1].properties[1]);

  /// See [ParkingSpaceEntity.pricePerHour].
  static final pricePerHour =
      obx.QueryDoubleProperty<ParkingSpaceEntity>(_entities[1].properties[2]);
}

/// [PersonEntity] entity fields to define ObjectBox queries.
class PersonEntity_ {
  /// See [PersonEntity.id].
  static final id =
      obx.QueryIntegerProperty<PersonEntity>(_entities[2].properties[0]);

  /// See [PersonEntity.name].
  static final name =
      obx.QueryStringProperty<PersonEntity>(_entities[2].properties[1]);

  /// See [PersonEntity.socialSecurityNumber].
  static final socialSecurityNumber =
      obx.QueryStringProperty<PersonEntity>(_entities[2].properties[2]);
}

/// [VehicleEntity] entity fields to define ObjectBox queries.
class VehicleEntity_ {
  /// See [VehicleEntity.id].
  static final id =
      obx.QueryIntegerProperty<VehicleEntity>(_entities[3].properties[0]);

  /// See [VehicleEntity.registrationNumber].
  static final registrationNumber =
      obx.QueryStringProperty<VehicleEntity>(_entities[3].properties[1]);

  /// See [VehicleEntity.owner].
  static final owner = obx.QueryRelationToOne<VehicleEntity, PersonEntity>(
      _entities[3].properties[2]);

  /// See [VehicleEntity.vehicleTypeIndex].
  static final vehicleTypeIndex =
      obx.QueryIntegerProperty<VehicleEntity>(_entities[3].properties[3]);
}
